// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"chenmingyong0423/blog/tutorial-code/wire/internal/post/handler"
	"chenmingyong0423/blog/tutorial-code/wire/internal/post/service"
	"chenmingyong0423/blog/tutorial-code/wire/ioc"
	"github.com/gin-gonic/gin"
)

// Injectors from wire.go:

func InitializeApp() *gin.Engine {
	iPostService := service.NewPostService()
	postHandler := handler.NewPostHandler(iPostService)
	engine := ioc.NewGinEngineAndRegisterRoute(postHandler)
	return engine
}

func InitializeAppV2() *gin.Engine {
	iPostService := service.NewPostService()
	postHandler := handler.NewPostHandler(iPostService)
	engine := ioc.NewGinEngineAndRegisterRoute(postHandler)
	return engine
}

func InitializeAppV3() *gin.Engine {
	postService := service.NewPostServiceV2()
	postHandler := handler.NewPostHandler(postService)
	engine := ioc.NewGinEngineAndRegisterRoute(postHandler)
	return engine
}

func InitializeUser() *User {
	name := NewName()
	publicAccount := NewPublicAccount()
	user := &User{
		MyName:          name,
		MyPublicAccount: publicAccount,
	}
	return user
}

func InjectUser() User {
	user := _wireUserValue
	return user
}

var (
	_wireUserValue = User{MyName: "陈明勇"}
)

func InjectPostService() service.IPostService {
	iPostService := _wirePostServiceValue
	return iPostService
}

var (
	_wirePostServiceValue = &service.PostService{}
)

func GetUserName() Name {
	user := NewUser()
	name := user.MyName
	return name
}

// wire.go:

type Name string

func NewName() Name {
	return "陈明勇"
}

type PublicAccount string

func NewPublicAccount() PublicAccount {
	return "公众号：Go技术干货"
}

type User struct {
	MyName          Name
	MyPublicAccount PublicAccount
}

func NewUser() User {
	return User{MyName: Name("陈明勇"), MyPublicAccount: PublicAccount("公众号：Go技术干货")}
}
